{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 You have successfully started mkdocs. Tutorial 1.1 Creating a new file in the root directory \u00b6 Create a new file called example.md in the root docs folder either through your code editor or console: $ cd docs $ echo 'testing' > example.md Update the root mkdocs.yml's Nav to the following: nav : - Intro : 'index.md' - Example : 'example.md' The mkdocs.yml always looks for the closest sibling docs folder by default. After saving you should see the new article > here < . Once you have visited return to this page. Tutorial 1.2 Linking Mkdocs.yml files \u00b6 I have already created the sub folders and initialised mkdocs within them (by using mkdocs new . ). We just have to link them to the root mkdocs.yml Simply add the following to your mkdocs.yml navigation (Nav:) nav : - Intro : 'index.md' - Example : 'example.md' - SubPages : '*include ./example-subpage/*/mkdocs.yml' So now you have linked subfolders - useful for monorepos. Tutorial 1.3 Linking an entirely separate repository \u00b6 Let's do an example where you want to have another repository added to your centralised documentation. Simply modify the root mkdocs.yml of this repo to read as follows: In the root repository run: $ meta git update nav : - Intro : 'index.md' - Example : 'example.md' - SubPages : '*include ./example-subpage/*/mkdocs.yml' - External Repository : '*include ./second-repo/mkdocs.yml' Note In a real-world application you would have the external repository outside of the root directory and not as a sub folder as shown in this example. That concludes the basic tutorial \u00b6 So you can now document various parts of your application, collaborate with other repositories that utilise Mkdocs. Cartman says it best: We Need To Work Together Eric Cartman GIF from We Need To Work Together GIFs Wait, is that it? \u00b6 NO! If you want to see other amazing features click the following: Using draw.io for diagrams \u00b6 >Click Here< for draw IO Tutorial Using Mermaid for amazing project design \u00b6 >Click Here< for mermaid Tutorial Openapi Example \u00b6 >Click Here< for openapi Tutorial","title":"Intro"},{"location":"#welcome","text":"You have successfully started mkdocs.","title":"Welcome"},{"location":"#tutorial-11-creating-a-new-file-in-the-root-directory","text":"Create a new file called example.md in the root docs folder either through your code editor or console: $ cd docs $ echo 'testing' > example.md Update the root mkdocs.yml's Nav to the following: nav : - Intro : 'index.md' - Example : 'example.md' The mkdocs.yml always looks for the closest sibling docs folder by default. After saving you should see the new article > here < . Once you have visited return to this page.","title":"Tutorial 1.1 Creating a new file in the root directory"},{"location":"#tutorial-12-linking-mkdocsyml-files","text":"I have already created the sub folders and initialised mkdocs within them (by using mkdocs new . ). We just have to link them to the root mkdocs.yml Simply add the following to your mkdocs.yml navigation (Nav:) nav : - Intro : 'index.md' - Example : 'example.md' - SubPages : '*include ./example-subpage/*/mkdocs.yml' So now you have linked subfolders - useful for monorepos.","title":"Tutorial 1.2 Linking Mkdocs.yml files"},{"location":"#tutorial-13-linking-an-entirely-separate-repository","text":"Let's do an example where you want to have another repository added to your centralised documentation. Simply modify the root mkdocs.yml of this repo to read as follows: In the root repository run: $ meta git update nav : - Intro : 'index.md' - Example : 'example.md' - SubPages : '*include ./example-subpage/*/mkdocs.yml' - External Repository : '*include ./second-repo/mkdocs.yml' Note In a real-world application you would have the external repository outside of the root directory and not as a sub folder as shown in this example.","title":"Tutorial 1.3 Linking an entirely separate repository"},{"location":"#that-concludes-the-basic-tutorial","text":"So you can now document various parts of your application, collaborate with other repositories that utilise Mkdocs. Cartman says it best: We Need To Work Together Eric Cartman GIF from We Need To Work Together GIFs","title":"That concludes the basic tutorial"},{"location":"#wait-is-that-it","text":"NO! If you want to see other amazing features click the following:","title":"Wait, is that it?"},{"location":"#using-drawio-for-diagrams","text":">Click Here< for draw IO Tutorial","title":"Using draw.io for diagrams"},{"location":"#using-mermaid-for-amazing-project-design","text":">Click Here< for mermaid Tutorial","title":"Using Mermaid for amazing project design"},{"location":"#openapi-example","text":">Click Here< for openapi Tutorial","title":"Openapi Example"},{"location":"diagram.io/","text":"Diagramming \u00b6 Edit in vscode and see real time updates in your documentation! Prerequisite \u00b6 Download vscode install the extension Draw.io Integration modify the example.drawio.png in Visual Code editor, save and see this page refresh Screenshot of Vscode editing: Back Home","title":"Diagramming"},{"location":"diagram.io/#diagramming","text":"Edit in vscode and see real time updates in your documentation!","title":"Diagramming"},{"location":"diagram.io/#prerequisite","text":"Download vscode install the extension Draw.io Integration modify the example.drawio.png in Visual Code editor, save and see this page refresh Screenshot of Vscode editing: Back Home","title":"Prerequisite"},{"location":"example/","text":"testing","title":"Example"},{"location":"mermaid/","text":"Diagramming with Mermaid \u00b6 Use code to document diagrams, flows, charts and more! Prerequisite \u00b6 Installed VSCode editor Install extension >click here Read Mermaid docs >click here Review the mermaid.md file in this repository for examples: C4 Model example \u00b6 C4Context title System Context diagram for Internet Banking System Enterprise_Boundary(b0, \"BankBoundary0\") { Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\") Person(customerB, \"Banking Customer B\") Person_Ext(customerC, \"Banking Customer C\", \"desc\") Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\") System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\") Enterprise_Boundary(b1, \"BankBoundary\") { SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") System_Boundary(b2, \"BankBoundary2\") { System(SystemA, \"Banking System A\") System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\") } System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\") SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\") Boundary(b3, \"BankBoundary3\", \"boundary\") { SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\") SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\") } } } BiRel(customerA, SystemAA, \"Uses\") BiRel(SystemAA, SystemE, \"Uses\") Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\") Rel(SystemC, customerA, \"Sends e-mails to\") UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\") UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\") UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\") UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\") UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\") UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\") Sequence example \u00b6 sequenceDiagram participant web as Web Browser participant blog as Blog Service participant account as Account Service participant mail as Mail Service participant db as Storage Note over web,db: The user must be logged in to submit blog posts web->>+account: Logs in using credentials account->>db: Query stored accounts db->>account: Respond with query result alt Credentials not found account->>web: Invalid credentials else Credentials found account->>-web: Successfully logged in Note over web,db: When the user is authenticated, they can now submit new posts web->>+blog: Submit new post blog->>db: Store post data par Notifications blog--)mail: Send mail to blog subscribers blog--)db: Store in-site notifications and Response blog-->>-web: Successfully posted end end Back Home","title":"Diagramming with Mermaid"},{"location":"mermaid/#diagramming-with-mermaid","text":"Use code to document diagrams, flows, charts and more!","title":"Diagramming with Mermaid"},{"location":"mermaid/#prerequisite","text":"Installed VSCode editor Install extension >click here Read Mermaid docs >click here Review the mermaid.md file in this repository for examples:","title":"Prerequisite"},{"location":"mermaid/#c4-model-example","text":"C4Context title System Context diagram for Internet Banking System Enterprise_Boundary(b0, \"BankBoundary0\") { Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\") Person(customerB, \"Banking Customer B\") Person_Ext(customerC, \"Banking Customer C\", \"desc\") Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\") System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\") Enterprise_Boundary(b1, \"BankBoundary\") { SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") System_Boundary(b2, \"BankBoundary2\") { System(SystemA, \"Banking System A\") System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\") } System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\") SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\") Boundary(b3, \"BankBoundary3\", \"boundary\") { SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\") SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\") } } } BiRel(customerA, SystemAA, \"Uses\") BiRel(SystemAA, SystemE, \"Uses\") Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\") Rel(SystemC, customerA, \"Sends e-mails to\") UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\") UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\") UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\") UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\") UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\") UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")","title":"C4 Model example"},{"location":"mermaid/#sequence-example","text":"sequenceDiagram participant web as Web Browser participant blog as Blog Service participant account as Account Service participant mail as Mail Service participant db as Storage Note over web,db: The user must be logged in to submit blog posts web->>+account: Logs in using credentials account->>db: Query stored accounts db->>account: Respond with query result alt Credentials not found account->>web: Invalid credentials else Credentials found account->>-web: Successfully logged in Note over web,db: When the user is authenticated, they can now submit new posts web->>+blog: Submit new post blog->>db: Store post data par Notifications blog--)mail: Send mail to blog subscribers blog--)db: Store in-site notifications and Response blog-->>-web: Successfully posted end end Back Home","title":"Sequence example"},{"location":"openapi/","text":"SwaggerUIBundle({ url: 'openapi.json', dom_id: '#swagger-ui', })","title":"Openapi"},{"location":"my-docs-page-one/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"my-docs-page-one/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"my-docs-page-one/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"my-docs-page-one/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"my-docs-page-two/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"my-docs-page-two/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"my-docs-page-two/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"my-docs-page-two/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"second-repository/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"second-repository/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"second-repository/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"second-repository/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"second-repository/example/","text":"Example of a second repository","title":"Example"}]}